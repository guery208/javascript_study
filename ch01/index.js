// 식별자
let age = 100; 
// let : 키워드, age : 식별자, 100 : 데이터

// 자바스크립트는 대소문자를 구분하기 때문에
//  아래 두 식별자는 다른 식별자로 취급한다.

let myFavorite;
let myfavorite;

// 자바스크립트의 예약어는 식별자로 사용할 수 없다.
// let, const, if, else, function, class, import, this

// 1.2 선택사항인 세미콜론
// 자바스크립트 역시 다른 프로그래밍 언어와 마찬가지로 
// 세미콜론(;)을 사용해서 문을 구분합니다.

// 세미콜론은 코드의 의미를 명확히 하는데 중요한 역할을 한다. / 마침표 역할

// 구분자가 없다면 어떤 문의 끝과 다른 문의 시작을 구분하기가 어렵기 때문에 
// 보통 세미콜론(;)을 사용합니다.

// 자바스크립트에서 두 문 사이에서 줄바꿈이 있을 때는 대부분 세미콜론(;)을 생략하곤 합니다.

// 1.3 변수 선언과 할당 
////////////////////////

//1.3.1 let과 const를 사용한 선언
// 변수를 선언할 땐, let 키워드를 사용
let i;
let sum;
// 가능하면 다음과 같이 변수를 선언할 땐, 초깃값을 할당하는 것이 좋은 프로그래밍 습관이다.
let message = "Hello world!";
let x = 10;
let y = x * x;

// let 문에서 변수에 초깃값을 할당하지 않으면, 값을 할당할 때까지 undefined로 남습니다.

//- 상수를 선언할 때에는 const라는 키워들 사용합니다.
// const는 let과 거의 비슷하지만, 선언할 때는 반드시 값을 할당해 초기화해야 한다는 점이 다릅니다.
//const name; // Error -> 'const' 선언을 초기화해야 합니다.
// 이름에서 짐작할 수 있듯이 상수의 값은 바꿀 수 없습니다.
// 반드시 지켜야 하는 건 아니지만, 상수를 선언할 때는 전부 대문자를 써서 변수와 구별하는 관습이 있습니다.
const KAKAO_SECRET_KET =""
const NAVER_SECRET_KET =""
// const 키워드는 자바스크립트에서 [변수 자체에 재할당을 방지하는 역할]을 합니다
// 하지만 const로 선언한 객체나 배열의 내용물(프로퍼티나 요소)은 변경할 수 있습니다.
// 이를 이해하기 위해서는 const가 어떻게 동작하는지 좀 더 깊이 있게 파악할 필요가 있습니다.

//1.const는 '변수 재할당'을 막는다
// const는 객체 자체나 배열을 다시 할당하는 것을 막습니다.
const user = {
    name: "9diin",
    email: "9diin@gmail.com",
};
console.log("첫 번째 유저", user); // {name: dd, email: ddd}

// user = {name:"test", user};
// console.log("두 번째 유저", user); // 에러, 상수재할당안된다


// 위 코드에서 user 자체를 다른 객체로 재할당하려고 하면 오류가 발생합니다.
// 하지만 객체 내부의 값을 바꾸는 것은 가능합니다.

// 2) 객체의 프로퍼티는 변경할 수 있다.
// 객체의 프로퍼티 값은 변경할 수 있습니다. 즉, const로 선언된 객체라도 
// 그 객체의 내부의 값은 수정이 가능하다
user.name = "test";
user.email = "test@test.com";
console.log("세 번째 유저", user);

// user 객체의 속성 값을 바꿀 수 있는 이유는 user라는 변수는 객체의 참조를 가리키고 있기 때문이다.

let a = "a"; // -> 메모리 주소 : A에 할당
let b = "b"; // -> 메모리 주소 : B에 할당
let c = {
    name: "",
    email: "",
    nickname: "",
    createdAt: "",
}; // -> 메모리 주소 : C에 할당


// 배열도 같은 규칙이 적용됩니다.
// 배열을 const로 선언하면, 배열 자체를 재할당 할 순 없지만,
// 배열의 요소를 변경하거나 추가하는 것은 가능하다.
const users = ["김아무개", "이아무개", "박아무개"];
console.log(users);

// users = ["최아무개","윤아무개","송아무개"]; // ->Error
// console.log(users);

users.push("장아무개"); //밀어넣다, 추가하는것
console.log(users);

users[0] = "Alex";
console.log(users);

// const는 객체나 배열이 재할당되는 것을 방지하지만, 그 내용물 (프로퍼티나 값,요소)은 여전히 변경할 수 있습니다
// const의 목적은 변수의 재할당을 방지하는 것 뿐이지 불변성을 보장하는 것은 아닙니다 
 